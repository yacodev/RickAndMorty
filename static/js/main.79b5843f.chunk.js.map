{"version":3,"sources":["services/data_fecth.js","utils/countLetters.js","components/Characters.js","constants.js","components/Episodes.js","components/Locations.js","utils/formatResult.js","utils/getTimeProcess.js","static/images/rick_and_morty_header.png","App.js","utils/getCharacterIdWithOrigin.js","utils/getEpisodesWithLocations.js","reportWebVitals.js","index.js"],"names":["getData","url","a","fetch","then","res","json","catch","error","Error","countLetters","arr","letter","join","toLowerCase","split","length","Characters","props","useEffect","chunkCharacters","allCharacters","results","info","next","localStorage","setItem","JSON","stringify","nameAllCharacters","forEach","character","push","name","countC","resultCount","isLoad","getAllCharacters","Episodes","chunkEpisodes","allEpisodes","nameAllEpisodes","episode","countE","getAllEpisodes","Locations","chunkLocations","allLocations","nameAllLocations","location","countL","getAllLocations","formatResult","time","result","resultEpisodeLocation","getTimeProcess","startTime","Date","now","ContainerPage","styled","div","ContainerImageHeader","ContainerResult","ContainerImagen","App","useState","loadCharacters","setLoadCharacters","loadLocations","setLoadLocations","loadEpisodes","setLoadEpisodes","setStartTime","setCountE","setCountL","setCountC","finishedFirstProcess","setFinishedFirstProcess","finishedSecondProcess","setFinishedSecondProcess","setResult","secondResult","setSecondResult","removeItem","firstProcessTime","resultsByChar","resultCharCounter","episodesWithLocations","characterIdWithOrigin","parse","getItem","obj","id","origin","getCharacterIdWithOrigin","resultEpisodesLocations","episodesByLocations","arrayLocationsOrigin","characters","characterIdFound","match","locationOrigin","Set","getEpisodesWithLocations","src","imagenHeader","alt","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79b5843f.chunk.js","sourcesContent":["export async function getData(url){\n  return fetch(url)\n  .then((res)=>res.json())\n  .catch((error)=> {throw new Error(error)})\n}","export default function countLetters(arr,letter){\n  const allLetters = arr.join('').toLowerCase();\n  return allLetters.split(letter).length - 1;\n}","import { getData } from '../services/data_fecth';\nimport { URL_CHARACTER } from \"../constants\";\nimport { useEffect} from 'react';\nimport countLetters from '../utils/countLetters';\n\n\nexport const Characters = (props)=>{\n  \n  useEffect(()=>{\n    const getAllCharacters = async()=>{\n      let chunkCharacters = await getData(URL_CHARACTER);\n      let allCharacters = [...chunkCharacters.results];\n      while(chunkCharacters.info.next){\n        chunkCharacters = await getData(chunkCharacters.info.next);\n        allCharacters = [...allCharacters,...chunkCharacters.results];\n      }\n      localStorage.setItem(\"Characters\", JSON.stringify(allCharacters));\n      let nameAllCharacters = [];\n      allCharacters.forEach((character)=>{\n        nameAllCharacters.push(character.name);\n      })\n      let countC = countLetters(nameAllCharacters,'c')\n      props.resultCount(countC);\n      props.isLoad(true);\n    }\n    getAllCharacters();\n  },[])\n\n  return(\n    <>\n    </>\n  )\n}","export const URL_CHARACTER = \"https://rickandmortyapi.com/api/character\";\nexport const URL_EPISODE = \"https://rickandmortyapi.com/api/episode\";\nexport const URL_LOCATION = \"https://rickandmortyapi.com/api/location\";","import { useEffect, useState } from \"react\"\nimport { URL_EPISODE } from \"../constants\"\nimport { getData } from \"../services/data_fecth\"\nimport countLetters from \"../utils/countLetters\"\n\n\nexport const Episodes = (props)=>{\n  useEffect(()=>{\n    const getAllEpisodes = async()=>{\n      let chunkEpisodes= await getData(URL_EPISODE);\n      let allEpisodes = [...chunkEpisodes.results];\n      while(chunkEpisodes.info.next){\n        chunkEpisodes = await getData(chunkEpisodes.info.next);\n        allEpisodes = [...allEpisodes,...chunkEpisodes.results];\n      }\n      localStorage.setItem(\"Episodes\", JSON.stringify(allEpisodes));\n      let nameAllEpisodes = [];\n      \n      allEpisodes.forEach((episode)=>{\n        nameAllEpisodes.push(episode.name);\n      })\n      let countE = countLetters(nameAllEpisodes, \"e\");\n      props.resultCount(countE);\n      props.isLoad(true);\n    }\n    getAllEpisodes();\n  },[])\n\n  return(\n    <>\n    </>\n  )\n}","import { useEffect } from \"react\"\nimport { URL_LOCATION } from \"../constants\"\nimport { getData } from \"../services/data_fecth\"\nimport countLetters from \"../utils/countLetters\"\n\nexport const Locations = (props)=>{\n  useEffect(()=>{\n    const getAllLocations = async()=>{\n      let chunkLocations = await getData(URL_LOCATION);\n      let allLocations = [...chunkLocations.results]\n      while(chunkLocations.info.next){\n        chunkLocations = await getData(chunkLocations.info.next);\n        allLocations = [...allLocations, ...chunkLocations.results];\n      }\n      localStorage.setItem(\"Locations\", JSON.stringify(allLocations));\n      let nameAllLocations = [];\n      allLocations.forEach((location)=>{\n        nameAllLocations.push(location.name);\n      })\n      let countL =countLetters(nameAllLocations, 'l');\n      props.resultCount(countL);\n      props.isLoad(true);\n    }\n    getAllLocations();\n  },[])\n\n  return(\n    <>\n    </>\n  )\n}","export function formatResult(name, time, result){\n  let resultEpisodeLocation = { \"exercise_name\": name};\n  resultEpisodeLocation[\"time\"]= `${time}ms`;\n  resultEpisodeLocation[\"in_time\"] = time<3000;\n  resultEpisodeLocation[\"result\"]= result;\n  return resultEpisodeLocation\n}","export default function getTimeProcess(startTime){\n  const finishTime = Date.now();\n  return finishTime - startTime;\n}","export default __webpack_public_path__ + \"static/media/rick_and_morty_header.78acc170.png\";","import { useEffect, useState } from 'react';\nimport './App.css';\nimport { Characters } from './components/Characters';\nimport { Episodes } from './components/Episodes';\nimport { Locations } from './components/Locations';\nimport { formatResult } from './utils/formatResult';\nimport getTimeProcess from './utils/getTimeProcess';\nimport imagenHeader from \"./static/images/rick_and_morty_header.png\"\nimport styled from '@emotion/styled';\nimport getCharacterIdWithOrigin from './utils/getCharacterIdWithOrigin';\nimport getEpisodesWithLocations from './utils/getEpisodesWithLocations';\n\nconst ContainerPage =styled.div`\n  display:flex;\n  flex-direction:column;\n`\n\nconst ContainerImageHeader = styled.div`\n  padding:auto;\n  width:100%;\n  img{\n    display:flex;\n    margin-left:auto;\n    margin-right:auto;\n  }\n`\n\nconst ContainerResult = styled.div`\n  display:flex;\n  flex-direction:row;\n  width:100%;\n  gap:80px;\n`\n\nconst ContainerImagen = styled.div`\n  margin-top:200px;\n`\n\nfunction App() {\n  const [loadCharacters, setLoadCharacters] = useState(false);\n  const [loadLocations, setLoadLocations] = useState(false);\n  const [loadEpisodes, setLoadEpisodes] = useState(false);\n  const [startTime,setStartTime]= useState(Date.now());\n  const [countE, setCountE]=useState(0)\n  const [countL, setCountL]=useState(0)\n  const [countC, setCountC]=useState(0)\n  const [finishedFirstProcess, setFinishedFirstProcess] = useState(false);\n  const [finishedSecondProcess, setFinishedSecondProcess] = useState(false);\n  const [result,setResult]=useState([]);\n  const [secondResult,setSecondResult]=useState([]);\n\n\n  useEffect(()=>{\n    if(finishedSecondProcess){\n      localStorage.removeItem(\"Characters\");\n      localStorage.removeItem(\"Episodes\");\n      localStorage.removeItem(\"Locations\");\n      setStartTime(0);\n      setCountC(0);\n      setCountL(0);\n      setCountE(0);\n    }\n  },[finishedSecondProcess])\n\n  useEffect(()=>{\n    if(loadCharacters && loadLocations && loadEpisodes){\n      const firstProcessTime= getTimeProcess(startTime);\n      \n      const resultsByChar = [];\n      resultsByChar.push({\"char\": \"l\", \"count\":countL, \"resource\": \"location\"});\n      resultsByChar.push({\"char\": \"e\", \"count\":countE, \"resource\": \"episodes\"});\n      resultsByChar.push({\"char\": \"c\", \"count\":countC, \"resource\": \"character\"});\n      let resultCharCounter = formatResult(\"Char counter\", firstProcessTime, resultsByChar)\n      \n      setResult([resultCharCounter]);\n      setFinishedFirstProcess(true);\n    }\n  },[loadCharacters, loadLocations, loadEpisodes])\n\n  useEffect(()=>{\n    if(finishedFirstProcess){\n      setStartTime(Date.now());\n      let episodesWithLocations = [];\n      \n      let characterIdWithOrigin = {};\n      characterIdWithOrigin= getCharacterIdWithOrigin();\n      \n      const allEpisodes = JSON.parse(localStorage.getItem('Episodes'));\n      episodesWithLocations = getEpisodesWithLocations(allEpisodes, characterIdWithOrigin);\n      const secondProcessTime = getTimeProcess(startTime);\n      \n      let resultEpisodeLocation = formatResult(\"Episode locations\", secondProcessTime, episodesWithLocations);\n      setSecondResult([resultEpisodeLocation]);\n      setFinishedSecondProcess(true);\n    }\n    \n  },[finishedFirstProcess])\n\n  return (\n    <ContainerPage>\n      <ContainerImageHeader>\n        <img src={imagenHeader} alt=\"imagen header\" width=\"1000px\"/>\n      </ContainerImageHeader>\n      <Characters \n        isLoad={setLoadCharacters}\n        resultCount={setCountC}\n      />\n      <Episodes \n        isLoad={setLoadEpisodes}\n        resultCount={setCountE}\n      />\n      <Locations\n        isLoad={setLoadLocations}\n        resultCount={setCountL}\n      />\n      <ContainerResult>\n        <ContainerImagen>\n          <img \n            src=\"https://www.freepnglogos.com/uploads/rick-and-morty-png/rick-and-morty-mind-bending-season-mysteries-quidd-6.png\" \n            width=\"300\" \n            alt=\"rick and morty mind bending season mysteries quidd\" \n          />\n        </ContainerImagen>\n        <div>\n          <pre>\n            {JSON.stringify(result, null, 2)}\n          </pre>\n        </div>\n        <div>\n          <pre>\n            {JSON.stringify(secondResult, null, 2)}\n          </pre>\n        </div>\n      </ContainerResult>\n    </ContainerPage>\n  );\n}\n\nexport default App;\n","export default function getCharacterIdWithOrigin(){\n  const allCharacters = JSON.parse(localStorage.getItem('Characters'));\n  let characterIdWithOrigin = {};\n\n  allCharacters.forEach((character)=>{\n    const characterId= character.id;\n    let obj= {};\n    obj[characterId]=character.origin.name;\n    characterIdWithOrigin = {...characterIdWithOrigin,...obj};\n  })\n\n  return characterIdWithOrigin\n}","export default function getEpisodesWithLocations(allEpisodes, characterIdWithOrigin){\n  let resultEpisodesLocations = [];\n  allEpisodes.forEach((episode)=>{\n    let episodesByLocations = {};\n    episodesByLocations[\"name\"]= episode.name;\n    episodesByLocations[\"episode\"]=episode.episode;\n    episodesByLocations[\"locations\"]=[];\n    let arrayLocationsOrigin = [];\n\n    episode.characters.forEach((character)=>{\n      let characterIdFound = character.match(/\\d+/);\n      let locationOrigin = characterIdWithOrigin[characterIdFound[0]];\n      arrayLocationsOrigin.push(locationOrigin);\n    })\n\n    episodesByLocations[\"locations\"] = [... new Set(arrayLocationsOrigin)]\n    resultEpisodesLocations.push(episodesByLocations);\n  })\n  return resultEpisodesLocations\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}